{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ktg1adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/flightsPrepare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "clean flights data, write to Parquet files",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ktg1CSV",
								"type": "DatasetReference"
							},
							"name": "flightsCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ktg1Parquet",
								"type": "DatasetReference"
							},
							"name": "writeFlights5M"
						},
						{
							"dataset": {
								"referenceName": "ktg1Parquet",
								"type": "DatasetReference"
							},
							"name": "write500K"
						}
					],
					"transformations": [
						{
							"name": "isLate"
						},
						{
							"name": "Clone",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "flag500K"
						},
						{
							"name": "flights500K"
						},
						{
							"name": "cleanFlag"
						},
						{
							"name": "departDate"
						},
						{
							"name": "thinColumns"
						},
						{
							"name": "departTime"
						}
					],
					"script": "source(output(\n\t\tYEAR as short,\n\t\tMONTH as short,\n\t\tDAY as short,\n\t\tDAY_OF_WEEK as short,\n\t\tAIRLINE as string,\n\t\tFLIGHT_NUMBER as short,\n\t\tTAIL_NUMBER as string,\n\t\tORIGIN_AIRPORT as string,\n\t\tDESTINATION_AIRPORT as string,\n\t\tSCHEDULED_DEPARTURE as string,\n\t\tDEPARTURE_TIME as short,\n\t\tDEPARTURE_DELAY as short,\n\t\tTAXI_OUT as short,\n\t\tWHEELS_OFF as short,\n\t\tSCHEDULED_TIME as short,\n\t\tELAPSED_TIME as short,\n\t\tAIR_TIME as short,\n\t\tDISTANCE as short,\n\t\tWHEELS_ON as short,\n\t\tTAXI_IN as short,\n\t\tSCHEDULED_ARRIVAL as string,\n\t\tARRIVAL_TIME as short,\n\t\tARRIVAL_DELAY as short,\n\t\tDIVERTED as boolean,\n\t\tCANCELLED as boolean,\n\t\tCANCELLATION_REASON as string,\n\t\tAIR_SYSTEM_DELAY as short,\n\t\tSECURITY_DELAY as boolean,\n\t\tAIRLINE_DELAY as short,\n\t\tLATE_AIRCRAFT_DELAY as short,\n\t\tWEATHER_DELAY as short,\n\t\tid as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\twildcardPaths:['flights/flightsSmall.csv'],\n\tpartitionBy('roundRobin', 8)) ~> flightsCSV\nflightsCSV derive(late_flight = (ARRIVAL_DELAY>30) || CANCELLED || DIVERTED) ~> isLate\ndepartTime select(mapColumn(\n\t\tYEAR,\n\t\tMONTH,\n\t\tDAY,\n\t\tDAY_OF_WEEK,\n\t\tAIRLINE,\n\t\tFLIGHT_NUMBER,\n\t\tTAIL_NUMBER,\n\t\tORIGIN_AIRPORT,\n\t\tDESTINATION_AIRPORT,\n\t\tSCHEDULED_DEPARTURE,\n\t\tDEPARTURE_TIME,\n\t\tSCHEDULED_TIME,\n\t\tDISTANCE,\n\t\tSCHEDULED_ARRIVAL,\n\t\tlate_flight,\n\t\tcleanFlag,\n\t\tdepart_date,\n\t\tdepart_time\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Clone\nClone derive({500K} = mod(\r\n    crc32(DAY,DAY_OF_WEEK,FLIGHT_NUMBER,\r\n    TAIL_NUMBER,SCHEDULED_DEPARTURE,\r\n    SCHEDULED_TIME,DISTANCE,SCHEDULED_ARRIVAL),\r\n    10) == 7) ~> flag500K\nflag500K filter({500K}) ~> flights500K\nthinColumns derive(cleanFlag = false()) ~> cleanFlag\ncleanFlag derive(depart_date = toDate(toString(YEAR)+'-'+toString(MONTH)+'-'+toString(DAY)+ ' ')) ~> departDate\nisLate select(mapColumn(\n\t\tYEAR,\n\t\tMONTH,\n\t\tDAY,\n\t\tDAY_OF_WEEK,\n\t\tAIRLINE,\n\t\tFLIGHT_NUMBER,\n\t\tTAIL_NUMBER,\n\t\tORIGIN_AIRPORT,\n\t\tDESTINATION_AIRPORT,\n\t\tSCHEDULED_DEPARTURE,\n\t\tDEPARTURE_TIME,\n\t\tSCHEDULED_TIME,\n\t\tDISTANCE,\n\t\tSCHEDULED_ARRIVAL,\n\t\tlate_flight\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> thinColumns\ndepartDate derive(depart_time = toTimestamp(toString(depart_date) + ' ' + \r\n    left(iif(length(SCHEDULED_DEPARTURE) == 3, \r\n    '0' + SCHEDULED_DEPARTURE, SCHEDULED_DEPARTURE)\r\n    ,2) + ':' + \r\nright(\r\n    iif(length(SCHEDULED_DEPARTURE) == 3, \r\n    '0' + SCHEDULED_DEPARTURE, SCHEDULED_DEPARTURE)\r\n    ,2)\r\n )) ~> departTime\nClone sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfilePattern:'5M/part[n].parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> writeFlights5M\nflights500K sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfilePattern:'500K/part[n].parquet',\n\tmapColumn(\n\t\tYEAR,\n\t\tMONTH,\n\t\tDAY,\n\t\tDAY_OF_WEEK,\n\t\tAIRLINE,\n\t\tFLIGHT_NUMBER,\n\t\tTAIL_NUMBER,\n\t\tORIGIN_AIRPORT,\n\t\tDESTINATION_AIRPORT,\n\t\tSCHEDULED_DEPARTURE,\n\t\tDEPARTURE_TIME,\n\t\tSCHEDULED_TIME,\n\t\tDISTANCE,\n\t\tSCHEDULED_ARRIVAL,\n\t\tlate_flight,\n\t\tcleanFlag,\n\t\tdepart_date,\n\t\tdepart_time\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> write500K"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/inpsectFiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Look at Parquet contents",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ktg1Parquet",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ktg1CSV",
								"type": "DatasetReference"
							},
							"name": "sinkhole"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tYEAR as short,\n\t\tMONTH as short,\n\t\tDAY as short,\n\t\tDAY_OF_WEEK as short,\n\t\tAIRLINE as string,\n\t\tFLIGHT_NUMBER as short,\n\t\tTAIL_NUMBER as string,\n\t\tORIGIN_AIRPORT as string,\n\t\tDESTINATION_AIRPORT as string,\n\t\tSCHEDULED_DEPARTURE as string,\n\t\tDEPARTURE_TIME as short,\n\t\tSCHEDULED_TIME as short,\n\t\tDISTANCE as short,\n\t\tSCHEDULED_ARRIVAL as string,\n\t\tlate_flight as boolean,\n\t\tcleanFlag as boolean,\n\t\tdepart_date as date,\n\t\tdepart_time as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['parquet/5M/*']) ~> source\nsource sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['temp/junk.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkhole"
				}
			},
			"dependsOn": []
		}
	]
}